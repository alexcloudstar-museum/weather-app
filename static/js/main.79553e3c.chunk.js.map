{"version":3,"sources":["context/weatherContext.ts","globalStyles.ts","services/weatherService.ts","shared/components/Days/style.ts","shared/components/Days/index.tsx","assets/cloudy.svg","assets/rain.svg","assets/snowing.svg","assets/thermometer.svg","utils/renderIcon/index.tsx","shared/components/Icon/style.ts","shared/components/Icon/index.tsx","assets/Spinner.gif","shared/components/Loader/style.ts","shared/components/Loader/index.tsx","shared/components/SearchBar/style.ts","shared/components/SearchBar/index.tsx","shared/components/Temp/style.ts","shared/components/Temp/index.tsx","shared/containers/WeatherBody/style.ts","shared/containers/WeatherBody/index.tsx","shared/containers/WeatherContainer/style.ts","shared/containers/WeatherContainer/index.tsx","App.tsx","index.tsx"],"names":["WeatherContext","createContext","weather","setWeather","value","GlobalStyle","createGlobalStyle","weatherService","city","a","URL","process","axios","get","data","DaysWrapper","styled","div","Days","day","renderIcon","iconCode","className","src","Cloudy","alt","Rain","Snowing","Thermometer","IconWrapper","Icon","LoaderWrapper","Loader","message","Spinner","SearchBarWrapper","SearchBar","searchCity","useState","setValue","onSubmit","e","preventDefault","alert","type","name","id","onChange","target","placeholder","TempWrapper","Temp","minTemp","maxTemp","WeatherBodyWrapper","WeatherBody","description","WeatherContainerWrapper","undefined","WeatherContainer","useContext","map","weatherData","datetime","min_temp","max_temp","code","parsedDateToNumbers","split","date","parsedData","DateTime","local","weekdayLong","Math","round","App","setCity","loading","setLoading","Provider","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.79553e3c.chunk.js","sourcesContent":["import { WeatherContextParams } from 'context';\nimport { createContext, SetStateAction, useContext } from 'react';\n\nexport type WeatherContextType = {\n  weather: WeatherContextParams[] | [];\n  setWeather: (value: SetStateAction<WeatherContextParams[]>) => void;\n};\n\nexport const WeatherContext = createContext<WeatherContextType>({\n  weather: [],\n  setWeather: (value: SetStateAction<WeatherContextParams[]>) => {},\n});\n\nexport const useWeatherContext = () => useContext(WeatherContext);\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  html,\n  body {\n    min-height: 100%;\n    font-family: 'Oswald', Open-Sans, Helvetica, Sans-Serif;\n  }\n  .App {\n  width: 100%;\n  height: 100vh;\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n}\n@media (min-width: 1399px) {\n  .App {\n    display: flex;\n  }\n}\n`;\n\nexport default GlobalStyle;\n","import axios from 'axios';\n\nconst weatherService = async (city: string) => {\n  const URL = `${process.env.REACT_APP_WEATHER_API_URL}/daily?days=5&city=${city}&key=${process.env.REACT_APP_WEATHER_API_KEY}`;\n\n  const { data } = await axios.get(URL);\n  return data.data;\n};\n\nexport default weatherService;\n","import styled from 'styled-components';\n\nexport const DaysWrapper = styled.div`\n  color: #b8b8b8;\n  margin: 15px 0;\n`;\n","import { FC } from 'react';\nimport { DaysWrapper } from 'shared/components/Days/style';\nimport { DaysProps } from 'shared/components/Days/types';\n\nconst Days: FC<DaysProps> = ({ day }) => <DaysWrapper>{day}</DaysWrapper>;\n\nexport default Days;\n","export default __webpack_public_path__ + \"static/media/cloudy.75e6c850.svg\";","export default __webpack_public_path__ + \"static/media/rain.de11ad59.svg\";","export default __webpack_public_path__ + \"static/media/snowing.80eba8a2.svg\";","export default __webpack_public_path__ + \"static/media/thermometer.194aaa54.svg\";","import { FC } from 'react';\n\nimport Cloudy from 'assets/cloudy.svg';\nimport Rain from 'assets/rain.svg';\nimport Snowing from 'assets/snowing.svg';\nimport Thermometer from 'assets/thermometer.svg';\nimport { IconCodeProps } from 'utils';\n\nconst renderIcon: FC<IconCodeProps> = ({ iconCode }) => {\n  switch (iconCode) {\n    case 801:\n      return <img className='icon' src={Cloudy} alt={Cloudy} />;\n\n    case 802:\n      return <img className='icon' src={Cloudy} alt={Cloudy} />;\n\n    case 803:\n      return <img className='icon' src={Cloudy} alt={Cloudy} />;\n\n    case 200:\n      return <img className='icon' src={Rain} alt={Rain} />;\n\n    case 201:\n      return <img className='icon' src={Rain} alt={Rain} />;\n\n    case 202:\n      return <img className='icon' src={Rain} alt={Rain} />;\n\n    case 600:\n      return <img className='icon' src={Snowing} alt={Snowing} />;\n\n    case 601:\n      return <img className='icon' src={Snowing} alt={Snowing} />;\n\n    case 602:\n      return <img className='icon' src={Snowing} alt={Snowing} />;\n\n    case 610:\n      return <img className='icon' src={Snowing} alt={Snowing} />;\n\n    default:\n      return <img className='icon' src={Thermometer} alt={Thermometer} />;\n  }\n};\n\nexport default renderIcon;\n","import styled from 'styled-components';\n\nexport const IconWrapper = styled.div`\n  img {\n    width: 50px;\n    margin: 0 auto;\n  }\n`;\n","import { FC } from 'react';\nimport { IconCodeProps, renderIcon } from 'utils';\nimport { IconWrapper } from './style';\n\nconst Icon: FC<IconCodeProps> = ({ iconCode }) => (\n  <IconWrapper>{renderIcon(iconCode)}</IconWrapper>\n);\n\nexport default Icon;\n","export default __webpack_public_path__ + \"static/media/Spinner.0f8e3ead.gif\";","import styled from 'styled-components';\n\nexport const LoaderWrapper = styled.div`\n  top: 50%;\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%, -50%);\n  img {\n    width: 100px;\n    height: 100px;\n  }\n`;\n","import { FC } from 'react';\nimport Spinner from 'assets/Spinner.gif';\nimport { LoaderWrapper } from './style';\nimport { LoaderProps } from './types';\n\nconst Loader: FC<LoaderProps> = ({ message }) => (\n  <LoaderWrapper className='Loader'>\n    <img src={Spinner} alt='Spinner' />\n    <h6 className='text-center-mt-3'>{message}</h6>\n  </LoaderWrapper>\n);\n\nexport default Loader;\n","import styled from 'styled-components';\nimport { SearchBarProps } from './types';\n\nexport const SearchBarWrapper = styled.div<SearchBarProps>`\n  width: 100%;\n  height: ${({ city }) => (city ? '30vh' : '100vh')};\n  text-align: center;\n  background-image: url('https://images.unsplash.com/photo-1559060017-445fb9722f2a?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80');\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n  position: relative;\n  input {\n    border: 0;\n    height: 38px;\n    margin-right: 15px;\n    text-align: center;\n    border-bottom: 1px solid #17a2b8;\n    margin-bottom: 10px;\n  }\n  input:focus {\n    outline: 0;\n  }\n  .SearchBarChilds {\n    top: 50%;\n    left: 50%;\n    position: absolute;\n    transform: translate(-50%, -50%);\n  }\n  .SearchBarChilds .formSearchCity {\n    display: flex;\n  }\n  @media (min-width: 1399px) {\n    & {\n      width: ${({ city }) => (city ? '30%' : '100%')};\n      height: 100vh;\n    }\n  }\n`;\n","import { FC, useState, ChangeEvent, FormEvent } from 'react';\nimport { SearchBarWrapper } from './style';\nimport { SearchBarProps } from './types';\n\nconst SearchBar: FC<SearchBarProps> = ({ city, searchCity }) => {\n  const [value, setValue] = useState(city);\n\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n\n    setValue(target.value);\n  };\n\n  const handleFormSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    value === '' ? alert('City can not be empty') : searchCity(value);\n  };\n\n  return (\n    <SearchBarWrapper city={city} searchCity={searchCity}>\n      <div className='SearchBarChilds'>\n        <h5 className='text-white'>Search weather on your city</h5>\n\n        <form onSubmit={handleFormSubmit}>\n          <input\n            type='text'\n            name='city'\n            id='inputSearchCity'\n            onChange={onChange}\n            value={value}\n            placeholder={'Search City...'}\n          />\n          <button type='submit' className='btn btn-outline-info text-white'>\n            Search\n          </button>\n        </form>\n      </div>\n    </SearchBarWrapper>\n  );\n};\n\nexport default SearchBar;\n","import styled from 'styled-components';\n\nexport const TempWrapper = styled.div`\n  margin: 18px 0;\n  font-size: 14px;\n  color: #212529;\n  span {\n    margin: 0 3px;\n  }\n  .min {\n    font-weight: 700;\n  }\n`;\n","import { FC } from 'react';\nimport { TempWrapper } from './style';\nimport { TempProps } from './types';\n\nconst Temp: FC<TempProps> = ({ minTemp, maxTemp }) => (\n  <TempWrapper>\n    <span className='min'>{minTemp}&#176;</span>\n    <span className='max'>{maxTemp}&#176;</span>\n  </TempWrapper>\n);\n\nexport default Temp;\n","import styled from 'styled-components';\n\nexport const WeatherBodyWrapper = styled.div`\n  .WeatherBody {\n    margin: 0 15px;\n    padding: 10px 50px;\n    transition: 0.3s all ease;\n    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3),\n      0 0 40px rgba(128, 128, 128, 0.1) inset;\n  }\n  .WeatherBody:hover {\n    cursor: pointer;\n    box-shadow: 0 15px 10px -10px rgba(31, 31, 31, 0.5);\n  }\n`;\n","import { FC } from 'react';\n\nimport { Days, Icon, Temp } from 'shared';\nimport { WeatherBodyWrapper } from './style';\nimport { WeatherBodyProps } from './types';\n\nconst WeatherBody: FC<WeatherBodyProps> = ({\n  day,\n  iconCode,\n  minTemp,\n  maxTemp,\n  description,\n}) => {\n  return (\n    <WeatherBodyWrapper>\n      <div className='WeatherBody card'>\n        <Days day={day} />\n        <Icon iconCode={iconCode} />\n        <Temp minTemp={minTemp} maxTemp={maxTemp} description={description} />\n      </div>\n    </WeatherBodyWrapper>\n  );\n};\n\nexport default WeatherBody;\n","import styled from 'styled-components';\n\nexport const WeatherContainerWrapper = styled.div<{ city: string }>`\n  width: 100%;\n  display: ${({ city }) => (city ? undefined : 'none')};\n  background: rgb(249, 157, 149);\n  background: -moz-linear-gradient(\n    90deg,\n    rgba(249, 157, 149, 1) 20%,\n    rgba(218, 107, 115, 1) 50%,\n    rgba(207, 99, 103, 1) 100%\n  );\n  background: -webkit-linear-gradient(\n    90deg,\n    rgba(249, 157, 149, 1) 20%,\n    rgba(218, 107, 115, 1) 50%,\n    rgba(207, 99, 103, 1) 100%\n  );\n  background: linear-gradient(\n    90deg,\n    rgba(249, 157, 149, 1) 20%,\n    rgba(218, 107, 115, 1) 50%,\n    rgba(207, 99, 103, 1) 100%\n  );\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#f99d95\",endColorstr=\"#cf6367\",GradientType=1);\n  .cityName {\n    display: none;\n  }\n  @media (min-width: 1399px) {\n    width: ${({ city }) => (city ? '70%' : undefined)};\n    height: 100vh;\n    display: ${({ city }) => (city ? 'flex' : 'none')};\n    text-align: center;\n    align-items: center;\n    justify-content: center;\n    .cityName {\n      display: block;\n      position: absolute;\n      top: 100px;\n      text-transform: uppercase;\n      letter-spacing: 5px;\n      color: #fff;\n      font-size: 30px;\n    }\n  }\n`;\n","import { FC } from 'react';\n\nimport { useWeatherContext, WeatherContextParams } from 'context';\nimport { WeatherBody } from 'shared';\n\nimport { WeatherContainerWrapper } from './style';\nimport { WeatherContainerProps } from './types';\n\nimport { DateTime } from 'luxon';\n\nconst WeatherContainer: FC<WeatherContainerProps> = ({ city }) => {\n  const { weather } = useWeatherContext();\n\n  return (\n    <WeatherContainerWrapper city={city}>\n      {city && <h5 className='cityName'>{city}</h5>}\n      {weather &&\n        weather.map((weatherData: WeatherContextParams) => {\n          const { datetime, weather, min_temp, max_temp } = weatherData;\n          const { code, description } = weather;\n\n          const parsedDateToNumbers = datetime.split('-').map(date => +date);\n\n          const parsedData = DateTime.local(\n            parsedDateToNumbers[0],\n            parsedDateToNumbers[1],\n            parsedDateToNumbers[2]\n          ).weekdayLong;\n\n          return (\n            <WeatherBody\n              day={parsedData}\n              iconCode={code}\n              minTemp={Math.round(min_temp)}\n              maxTemp={Math.round(max_temp)}\n              description={description}\n              key={datetime}\n            />\n          );\n        })}\n    </WeatherContainerWrapper>\n  );\n};\n\nexport default WeatherContainer;\n","import { FC, useState } from 'react';\nimport { WeatherContext } from 'context/weatherContext';\nimport GlobalStyle from 'globalStyles';\nimport { weatherService } from 'services';\nimport { SearchBar, WeatherContainer, Loader } from 'shared';\nimport { WeatherContextParams } from 'context';\n\nconst App: FC = () => {\n  const [city, setCity] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [weather, setWeather] = useState<WeatherContextParams[]>([]);\n\n  const searchCity = async (city: string) => {\n    setCity(city);\n    setLoading(true);\n    const weather = await weatherService(city);\n    setWeather(weather);\n    setLoading(false);\n  };\n\n  return (\n    <WeatherContext.Provider value={{ weather, setWeather }}>\n      <GlobalStyle />\n      {loading ? (\n        <Loader message={'Loading data...'} />\n      ) : (\n        <div className='App'>\n          <SearchBar city={city} searchCity={searchCity} />\n          <WeatherContainer city={city} />\n        </div>\n      )}\n    </WeatherContext.Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}